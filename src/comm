arc_sets.rs://
arc_sets.rs://  This code is available under the Berkeley 2-Clause, Berkely 2-clause,
arc_sets.rs://  and MIT licenses.  It is also available as public domain source where
arc_sets.rs://  permitted by law.
arc_sets.rs://
arc_sets.rs:// Define the trait for traversing a set and its hierarchy.
gen_hier.rs://
gen_hier.rs://  This code is available under the Berkeley 2-Clause, Berkely 2-clause,
gen_hier.rs://  and MIT licenses.  It is also available as public domain source where
gen_hier.rs://  permitted by law.
gen_hier.rs://
hier.rs://
hier.rs://  This code is available under the Berkeley 2-Clause, Berkely 2-clause,
hier.rs://  and MIT licenses.  It is also available as public domain source where
hier.rs://  permitted by law.
hier.rs://
lib.rs://
lib.rs://  This code is available under the Berkeley 2-Clause, Berkely 2-clause,
lib.rs://  and MIT licenses.  It is also available as public domain source where
lib.rs://  permitted by law.
lib.rs://
lib.rs://! 'Rustics' provides a very simple interface for recording events and printing statistics.
lib.rs://!
lib.rs://! ## Types
lib.rs://!
lib.rs://! * Statistics for Integer Values
lib.rs://!     * Integer statistics provide basic parameters, like the mean, and a pseudo-log histogram.
lib.rs://!     * For the pseudo-log histogram, the pseudo-log of a negative number n is defines as -log(-n).
lib.rs://!       The pseudo-log of 0 is defined as 0, and for convenience, the pseudo-log of -(2^64) is defined
lib.rs://!       as 63.  Logs of positive values are computed by rounding up any fractional part, so the
lib.rs://!       pseudo-log of 5 is 3.  From the definition, the pseudo-log of -5 is -3.
lib.rs://!     * The values can be interpreted as time periods with a given hertz.
lib.rs://!
lib.rs://! * Integer statistics structs
lib.rs://!     * RunningInteger
lib.rs://!         * This type implements a few running statistics for a series of i64 sample values.
lib.rs://!         * It also provides a pseudo-log histogram.
lib.rs://!
lib.rs://!     * RunningWindow
lib.rs://!         * This type implements a fixed-size window of the last n samples recorded.  Summary
lib.rs://!           statistics of the window samples are computed on demand.
lib.rs://!         * It also provides a pseudo-log historgram.  The histogram counts all samples seen,
lib.rs://!           not just the current window.
lib.rs://!
lib.rs://!     * Counter
lib.rs://!         * This type implements a simple counter that generates no further statistics.  It
lib.rs://!           can be used for counting events, for example.
lib.rs://!
lib.rs://! * Time statistics structs
lib.rs://!     * RunningTime
lib.rs://!         * This type uses the RunningInteger code to handle time intervals.  Values will be
lib.rs://!           printed using units of time.
lib.rs://!
lib.rs://!     * TimeWindow
lib.rs://!         * This type uses the IntegerWindow code to handle time intervals.  As with the
lib.rs://!           RunningTime type, values are printed in units of time.
lib.rs://!
lib.rs://! * Hierarchial Statistics
lib.rs://!     * Hierarchical statistics contain sums of integer statistics objects, and can be
lib.rs://!       multi-level.  Values are recorded into an integer statistic of some kind.  When
lib.rs://!       the hierarchical struct receives a request to advance to a new statistics object,
lib.rs://!       the current statistic that is collecting data is pushed into a window, and a new
lib.rs://!       statistics object will be created to hold any new values to be recorded.
lib.rs://!
lib.rs://!     * When a programmable number of statistics objects have been pushed into a window,
lib.rs://!       these statistics are summed and the sum placed in a high level window.  The
lib.rs://!       summation is done recursively up to a programmed number of levels.  Each level
lib.rs://!       has a parameter specifying the number of objects to be summed.
lib.rs://!
lib.rs://!     * The lowest level, the one to which statistical data is recorded, can be configured
lib.rs://!       to push the current object and start a new one after a certain number of samples
lib.rs://!       have been recorded, or the advance() method can be invoked to move to a new
lib.rs://!       statistics object.
lib.rs://!
lib.rs://!     * Each level of statistics has a programmable "live" count that gives the number of
lib.rs://!       objects that are summed and pushed to the higher level, and a retention window, so
lib.rs://!       that statistics are kept for some time period after being summed.
lib.rs://!
lib.rs://! * Creating Sets
lib.rs://!     * The "arc_sets" and "rc_sets" modules implement a simple feature allowing the creation of sets
lib.rs://!       that accept statistics and subsets as members.
lib.rs://!
lib.rs://!     * RusticsArcSet
lib.rs://!         * This type functions as an Arc-based implementation of sets and subsets that can be printed
lib.rs://!           and cleared on command.
lib.rs://!
lib.rs://!     * RusticsRcSet
lib.rs://!         * This type functions as an Rc-based implementation of sets and subsets.  These sets will be
lib.rs://!           significantly faster than Arc-based sets, but are not thread-safe.
lib.rs://!
lib.rs://! * Timers
lib.rs://!     *  Timer
lib.rs://!         * This trait is the basic abstract timer.  A timer has a frequency and returns
lib.rs://!           an integer duration in units of that frequency.  The Timer interface provides
lib.rs://!           "start" and "finish" methods to measure clock intervals.
lib.rs://!
lib.rs://!     *  DurationTimer
lib.rs://!         * This implementation of a timer uses the Rust "Duration" implementation, which measures
lib.rs://!           wall clock time.
lib.rs://!
lib.rs://!     *  ClockTimer
lib.rs://!         * This implementation is a wrapper for a simple time counter (trait SimpleClock) that
lib.rs://!           returns an integer corresponding to the current "time" value.  For example, a cycle
lib.rs://!           counter could be wrapped to implement a ClockTimer.  This wrapper can be used with a
lib.rs://!           platform-specific counter such as one of the Linux clock_* functions.  The wrapper
lib.rs://!           implementation provides the "start" and "finish" methods, along with initialization,
lib.rs://!           so the wrapped counter can be very simple.
lib.rs://!
lib.rs://!     *  SimpleClock
lib.rs://!         * This trait defines the interface used by ClockTimer to query a clock.
lib.rs://!
lib.rs:// Insert commas into a string containing an integer.
lib.rs:// Convert an i64 into a string with comma separators.
lib.rs:// Convert an u64 into a string with comma separators.
lib.rs:// Format a time value for printing.
lib.rs:// Compute the sample variance.
lib.rs:// Compute the sample skewness.
lib.rs://
lib.rs:// This formula is from brownmath.com.
lib.rs:// Compute the sample kurtosis.
lib.rs://
lib.rs:// This formula is from brownmath.com
lib.rs:// This function returns an array index to record a log value
lib.rs:// in a histogram.  Callers are expected to use two arrays,
lib.rs:// one for positive and one for negative values, so this routine
lib.rs:// ignores the sign of its input.
lib.rs://
lib.rs:// The algorithm implements a simple log-like function of the
lib.rs:// absolute value of its input.  It is intended only for making
lib.rs:// histograms.
lib.rs://
lib.rs:// The pseudo-log of most negative integers n is defined as -log(-n)
lib.rs:// to give a reasonable histogram structure.  The pseudo-log of
lib.rs:// i64::MIN is defined as 63 for convenience.  This routine always
lib.rs:// returns a positive index for an array, so the return value is
lib.rs:// pseudo-log(-n).  The calling routine handles the negation by using
lib.rs:// separate arrays for positive and negative pseudo-log values.
lib.rs://
lib.rs:// In addition, pseudo-log(0) is defined as 0.
lib.rs://
lib.rs:// Insert a delimiter and concatenate the parent and child names
lib.rs:// when creating a hierarchical title.
lib.rs:// These structures and routines are common code for printing
lib.rs:// statistics.
lib.rs:// Print the common integer statistics as passed in a Printable structure.
lib.rs:// Print the common computed statistics as passed in a Printable structure.
lib.rs:// This includes values like the mean, which should be limited to an integer
lib.rs:// value.
lib.rs:// Implement a structure for the pseudo-log histograms.
lib.rs:// Define a Printer trait to allow a custom stream for print() operations.
lib.rs://
lib.rs:// This routine is invoked for each line to be printed.  The print() member
lib.rs:// is responsible for adding the newline, either via println!() or some
lib.rs:// other mechanism.
lib.rs:// Define a printer that will send output to Stdout or Stderr, as
lib.rs:// configured.
lib.rs:// Define the main trait for collecting statistics.  Eventually, this
lib.rs:// library will support floating point samples.
lib.rs:// Define the implementation of a very simple running integer sample space.
lib.rs:// The formula for computing the second moment for the variance (moment_2)
lib.rs:// is from D. E. Knuth, The Art of Computer Programming.
lib.rs:// Define the implementation of a very simple running integer window sample.
rc_sets.rs://
rc_sets.rs://  This code is available under the Berkeley 2-Clause, Berkely 2-clause,
rc_sets.rs://  and MIT licenses.  It is also available as public domain source where
rc_sets.rs://  permitted by law.
rc_sets.rs://
rc_sets.rs:// Define the trait for traversing a set and its hierarchy.
sum.rs://
sum.rs://  This code is available under the Berkeley 2-Clause, Berkely 2-clause,
sum.rs://  and MIT licenses.  It is also available as public domain source where
sum.rs://  permitted by law.
sum.rs://
sum.rs://  Sort a set by absolute value to improve the accuracy of summation.
sum.rs:// Implement a Kahan-Babushka-Klein summation routine.  Add a
sum.rs:// sort on the inputs.  For our purposes, the sort is low enough
sum.rs:// in cost.  See the Wikipedia page on Kahan summation for
sum.rs:// details.
time.rs://
time.rs://  This code is available under the Berkeley 2-Clause, Berkely 2-clause,
time.rs://  and MIT licenses.  It is also available as public domain source where
time.rs://  permitted by law.
time.rs://
time.rs://  A Timer is an abstraction of a clock to be used for performance
time.rs://  monitoring.  It is intended to allow for many implementations.
time.rs://  The underlying clock implementation determines the meaning of an
time.rs://  interval value.  For example, a DurationTimer uses the standard
time.rs://  Rust Duration type, which returns wall-clock time.
time.rs://
time.rs://  The start method starts a timing interval.  It may be called
time.rs://  multiple times on a single structure.  The last invocation of
time.rs://  the start method overrides any previous calls.
time.rs://
time.rs://  The finish routine is used at the end of a sample interval.  It
time.rs://  returns the interval time in nanoseconds and also starts a new
time.rs://  interval, since the restart cost is nearly zero.  Thus, "finish"
time.rs://  can be called multiple times after a "start" invocation to return
time.rs://  the times for a sequence of events.  If a more precise timing is
time.rs://  required, "start" will start an interval.
time.rs://
time.rs://  hz returns the herz of the underlying clock.
time.rs://  DurationTimer uses the Rust standard time function "Duration" to
time.rs://  measure time intervals.  This timer thus returns wall-clock time.
time.rs://  This trait can be implemented for platform-specific clocks.
time.rs://  The structures can then be wrapped in a ClockTimer struct.
time.rs://  See the test routine "simple_test_clock" for an example.
time.rs://  This is a wrapper class for platform-specific clocks that
time.rs://  would be useful to support.
time.rs://
time.rs://  For efficiency, using 64-bit math internally might be useful.
time.rs://  On the other hand, using femtoseconds might be useful for
time.rs://  particularly hostile hz ratings.
window.rs://
window.rs://  This code is available under the Berkeley 2-Clause, Berkely 2-clause,
window.rs://  and MIT licenses.  It is also available as public domain source where
window.rs://  permitted by law.
window.rs://
